#!/usr/bin/env node

var exec    = require('child_process').exec,
    fs      = require('fs'),
    knox    = require('knox'),
    path    = require('path'),
    Step    = require('step'),
    util    = require('util'),
    yaml    = require('js-yaml'); // register .yaml require handler

fs.exists = fs.exists || require('path').exists;                                // wuh? https://github.com/joyent/node/issues/3005

(function () {
    var stylusAppPath   = __dirname + '/../node_modules/stylus/bin/stylus',        // use this app's modules

        callingPath     = process.cwd(),                                        // stuff for the caller
        assetsPath      = callingPath + '/public/assets',                       // todo: arg
        cssDirPath      = callingPath + '/public/stylesheets/',                 // todo: arg
        stylusFilePath  = callingPath + '/public/stylesheets/site.styl',        // todo: arg
        yamlFilePath    = callingPath + '/config/assets.yml',                   // todo: arg

        assets          = {};

    bundle(function (err) {
        if (err) {
            console.error(err);
        }
    });

    function bundle (callback) {
        console.log('processing yaml file: ' + yamlFilePath);

        Step(
            function () {
                try {
                    assets = require(yamlFilePath);

                    if (!assets.hasOwnProperty('s3')) throw new Error('missing s3 section in yaml file');
                }
                catch (err) {
                    return callback(err);
                }

                this(undefined);
            },
            // function compileCssWithStylus (err) {
            //     if (err) return callback(err);
            //
            //     // make sure the css file is up to date
            //     var command = util.format('%s %s --out %s', stylusAppPath, stylusFilePath, cssDirPath);
            //     exec(command, this);
            // },
            function execJammit (err, stdout, stderr) {
                err = err || stderr;
                if (err) return callback(err);

                var command = util.format('jammit -f -c %s -o %s', yamlFilePath, assetsPath);
                exec(command, this);
            },
            function readAssetDir (err, stdout, stderr) {
                err = err || stderr;
                if (err) return callback(err);

                console.log('minified assets to ' + assetsPath);

                fs.readdir(assetsPath, this);
            },
            function pushAssetsToS3 (err, files) {
                if (err) return callback(err);

                var client  = knox.createClient(assets.s3),
                    group   = this.group();

                files.forEach(function (file) {
                    var filePath        = assetsPath + '/' + file,
                        fileWithHash    = '';
                        extension       = path.extname(file),
                        headers         = {};

                    headers = {
                        'Content-Type': contentType(extension),     // MIME
                        'x-amz-acl': 'public-read'
                    };

                    if (assets.s3.hasOwnProperty('hash')) {
                        file = file.replace('.', '-' + assets.s3.hash + '.');
                    }

                    client.putFile(filePath, assetType(file) + '/' + file, headers, group());
                });
            },
            function done (err, stdout, stderr) {
                err = err || stderr;
                if (err) return callback(err);

                console.log('files uploaded to S3');
            }
        );
    }

    function assetType (file) {
        var extension = path.extname(file);

        switch (extension) {
            case '.css':
                return 'stylesheets';
                break;

            case '.gz':
                return assetType(file.replace('.gz', ''));
                break;

            case '.js':
                return 'javascripts';
                break;

            case '.png':
            case '.jpg':
            case '.jpeg':
            case '.gif':
                return 'images';
                break;

            default:
                return '';
        }
    }

    function contentType (extension) {
        switch (extension) {
            case '.css':
                return 'text/css';
                break;

            case '.gz':
                return 'application/x-gzip';
                break;

            case '.js':
                return 'application/javascript';
                break;

            case '.png':
                return 'image/png';
                break;

            case '.jpg':
            case '.jpeg':
                return 'image/jpeg';
                break;

            case '.gif':
                return 'image/gif';
                break;

            default:
                return '';
        }
    }
})();
